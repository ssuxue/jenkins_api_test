# This is a basic workflow that is manually triggered

name: Code review workflow

# Controls when the action will run. Workflow runs when manually triggered using the UI
# or API.
on:
  push
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "greet"
  review:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    outputs:
      myVar: ${{ steps.valid-coverage.outputs.coverage-rate }}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: check repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 2 
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ruff pytest
          pip install coverage
          pip install argparse
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - name: Diff with git
        run: |
          git diff HEAD~1 HEAD > b.diff
          cat b.diff
      - name: Test with pytest
        id: valid-coverage
        run: |
          python ./run.py --path=b.diff > pt.log
          # echo "rate=`awk 'END {print}' pt.log`" >> "$GITHUB_ENV"
          cat pt.log | awk 'END {print}'
          rate=`cat pt.log | awk 'END {print}'`
          echo "coverage-rate=true" >> "$GITHUB_OUTPUT"
          echo "$rate"
      - name: Linting
        run: |
          pip install pre-commit
          pre-commit run --all-files
      - name: Lint with ruff
        run: |
          # stop the build if there are Python syntax errors or undefined names
          # ruff --format=github --select=E9,F63,F7,F82 --target-version=py37 .
          # default set of ruff rules with GitHub Annotations
          ruff check --format=github --fix .
      - name: rollback
        if: ${{ myVar }} == 'true'
        run: |
          # git config --global user.email "${{ secrets.email }}"
          # git config --global user.name "ssuxue"
          # # git revert HEAD
          # git reset --hard HEAD^
          # git push --force origin
